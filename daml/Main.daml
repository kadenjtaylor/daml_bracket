module Main where

import Daml.Script
import DA.List (isInfixOf, unique)
import DA.Text (asciiToLower)
import Tournament

type AssetId = ContractId Asset

template Asset
  with
    issuer : Party
    owner  : Party
    name   : Text
  where
    ensure name /= ""
    signatory issuer
    observer owner
    choice Give : AssetId
      with
        newOwner : Party
      controller owner
      do create this with
           owner = newOwner

-- ==================================

type RosterId = ContractId Roster

template Roster
  with
    judge : Party
    entrants : [Party]
  where
    signatory judge
    observer entrants

    -- no duplicate entrants, judge may not enter
    ensure unique entrants && not ([judge] `isInfixOf` entrants)

    choice Bracketize: TournamentId
      with
      controller judge
      do
        create Tournament with
          judge = judge
          bracket = bracketize entrants

-- ==================================

-- TODO: Understand the difference between ALL THIS stuff
--       and just "allocateParty" from the examples
-- For now, Just abstract it away into "setup"
setupUser: Text -> Script Party
setupUser name = do
  party <- allocatePartyWithHint name (PartyIdHint name)
  partyId <- validateUserId (asciiToLower name)
  createUser (User partyId (Some party)) [CanActAs party]
  return party

setupUsers: [Text] -> Script [Party]
setupUsers names = mapA setupUser names

setup : Script TournamentId
setup = script do

  [alice, bob, charlie, dave, elsa, frank] <- setupUsers ["Alice", "Bob", "Charlie", "Dave", "Elsa", "Frank"]

  aliceTV <- submit alice do
    createCmd Asset with
      issuer = alice
      owner = alice
      name = "TV"

  bobTV <- submit alice do
    exerciseCmd aliceTV Give with newOwner = bob

  submit bob do
    exerciseCmd bobTV Give with newOwner = alice

  roster <- submit elsa do
    createCmd Roster with
      judge = elsa
      entrants = [bob, charlie, dave, alice, frank]

  submit elsa do
    exerciseCmd roster Bracketize