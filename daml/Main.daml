module Main where

import Daml.Script
import DA.List (isInfixOf, unique)
import DA.Text (asciiToLower)
import Tournament

type TrophyId = ContractId Trophy

template Trophy
  with
    judge: Party
    winner: Party
  where
    signatory judge
    observer [judge, winner]

type RosterId = ContractId Roster

template Roster
  with
    judge : Party
    entrants : [Party]
  where
    signatory judge
    observer entrants

    -- no duplicate entrants, judge may not enter
    ensure unique entrants && not ([judge] `isInfixOf` entrants)

    -- TODO: Add invite mechanism to Roster to collect entrants over time

    choice Bracketize: TournamentId
      with
      controller judge
      do
        create Tournament with
          judge = judge
          bracket = bracketize entrants

type TournamentId = ContractId Tournament

template Tournament
  with
    judge: Party
    bracket: Bracket
  where
    ensure isWellFormed bracket
    signatory judge
    observer playersIn bracket
  
    choice Report: Either TrophyId TournamentId
      with
        report: MatchReport
      controller judge
      do
        case (applyReport bracket report) of
          Finished winner -> do
            trophyId <- create (Trophy judge winner)
            return $ Left trophyId
          Next newBracket -> do
            tournamentId <- create (this with bracket = newBracket)
            return $ Right tournamentId
          Error msg -> error (show msg)

    nonconsuming choice ActiveMatches: [ActiveMatch]
      with
      controller judge
      do return $ activeMatches bracket

-- ==================================

-- TODO: Understand user setup process better
setupUser: Text -> Script Party
setupUser name = do
  party <- allocatePartyWithHint name (PartyIdHint name)
  partyId <- validateUserId (asciiToLower name)
  createUser (User partyId (Some party)) [CanActAs party]
  return party

setupUsers: [Text] -> Script [Party]
setupUsers names = mapA setupUser names

-- ==================================

setup : Script ()
setup = script do

  [alice, bob, charlie, dave, elsa, frank] <- setupUsers ["Alice", "Bob", "Charlie", "Dave", "Elsa", "Frank"]

  roster <- submit elsa do
    createCmd Roster with
      judge = elsa
      entrants = [bob, charlie, dave, alice, frank]

  tournament <- submit elsa do
    exerciseCmd roster Bracketize

  activeMatches <- submit elsa do
    exerciseCmd tournament ActiveMatches

  debug $ activeMatches